# Create an image
# [reference documentation](https://www.packer.io/docs/templates)

# Execution:
# AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)
# AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)
# packer build ami_gen_ta2_example.pkr.hcl


locals { timestamp = regex_replace(timestamp(), "[- TZ:]", "") }

# source blocks configure your builder plugins; your source is then used inside
# build blocks to create resources. A build block runs provisioners and
# post-processors on an instance created by the source.
source "amazon-ebs" "example" {
  ami_name      = "sieve_ami_exampleteam_ta2 ${local.timestamp}"

  # You may want to modify this line for a more powerful machine.
  instance_type = "t2.micro"

  region        = "us-east-1"
  source_ami_filter {
    filters = {

      # If you want to use a base image other than the newest, modify this line to its name.
      name = "amzn2-ami-hvm-*-x86_64-gp2"

    }
    most_recent = true
    # Indicates that only an ami from Amazon should be used
    owners      = ["137112412989"]
  }
  ssh_username = "ec2-user"
}

# a build block invokes sources and runs provisioning steps on them.
# https://www.elastic.co/guide/en/beats/metricbeat/current/setup-repositories.html
build {
  # this points to the base image specified above
  sources = ["source.amazon-ebs.example"]

  provisioner "shell" {
    inline = [
        "curl https://www.dropbox.com/s/jg1hyvnjy2z65jh/circ.tar.gz?dl=0 -L -o circ.tar.gz",
        "tar -xf circ.tar.gz",
        "sudo apt-get update",
        "sudo apt install coinor-cbc coinor-libcbc-dev build-essential m4 curl wget -y",
        "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y",
    ]
  }
}