from "../third_party/ZoKrates/zokrates_stdlib/stdlib/hashes/poseidon/poseidon.zok" import generate_poseidon
from "ChaCha.zok" import chachaEncrypt
from "Util.zok" import xor_field, field_to_u8_array, pack_u8_arr, u32_to_four_u8, compare_field, u8_to_field
import "./policy2000.zok" as regex2000


const u8[160] true_pt = [71, 69, 84, 32, 47, 100, 110, 115, 45, 113, 117, 101, 114, 121, 63, 100, 110, 115, 61, 100, 65, 48, 66, 65, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 66, 109, 70, 116, 89, 88, 112, 118, 98, 103, 78, 106, 98, 50, 48, 65, 65, 65, 69, 65, 65, 81, 32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 72, 111, 115, 116, 58, 32, 99, 108, 111, 117, 100, 102, 108, 97, 114, 101, 45, 100, 110, 115, 46, 99, 111, 109, 58, 52, 52, 51, 13, 10, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 105, 100, 101, 110, 116, 105, 116, 121, 13, 10, 97, 99, 99, 101, 112, 116, 58, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 100, 110, 115, 45, 109, 101, 115, 115, 97, 103, 101, 13, 10, 13, 10]



const u8[28] decoded_b64 = [116, 13, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 97, 109, 97, 122, 111, 110, 3, 99, 111, 109, 0, 0, 1, 0, 1]

const u8[38] wire_format = [100, 65, 48, 66, 65, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 66, 109, 70, 116, 89, 88, 112, 118, 98, 103, 78, 106, 98, 50, 48, 65, 65, 65, 69, 65, 65, 81]

def main(private u8[32] key, private u8[12] nonce, field comm, u32 SN, u8[2000] ciphertext) -> bool:
        field key_field = pack_u8_arr(key)
        field nonce_field = pack_u8_arr(nonce)
        field comm_cal = generate_poseidon([key_field, nonce_field])

        assert(comm == comm_cal)

        u8[4] SN_u8 = u32_to_four_u8(SN)
        for u32 i in 0..4 do
            nonce[12 - i - 1] = nonce[12 - i - 1] ^ SN_u8[4 - i - 1]
        endfor
        u8[2000] plaintext = chachaEncrypt::<2000>(key, nonce, ciphertext, 1)
        
        field[2000] field_plaintext = [0; 2000]
        for u32 i in 0..2000 do
            field_plaintext[i] = u8_to_field(plaintext[i])
        endfor
        bool output = regex2000(field_plaintext, plaintext)
        
        return true 