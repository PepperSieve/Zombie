from "../third_party/ZoKrates/zokrates_stdlib/stdlib/hashes/poseidon/poseidon.zok" import generate_poseidon
from "AES.zok" import aes_gcm_encrypt
from "Util.zok" import xor_field, field_to_u8_array, pack_u8_arr, u32_to_four_u8, compare_field
from "LabelExtraction.zok" import extractDoHGETReverse
from "./membership_merkle/non_membership.zok" import check_wildcard_python_path


// Following arrays are used for debugging 
const u8[160] true_pt = [0x47, 0x45, 0x54, 0x20, 0x2f, 0x64, 0x6e, 0x73, 0x2d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3f, 0x64, 0x6e, 0x73, 0x3d, 0x52, 0x44, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x6d, 0x46, 0x74, 0x59, 0x58, 0x70, 0x76, 0x62, 0x67, 0x4e, 0x6a, 0x62, 0x32, 0x30, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x51, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x64, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x34, 0x34, 0x33, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x0d, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x6e, 0x73, 0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0d, 0x0a, 0x0d, 0x0a]
const u8[28] decoded_b64 = [116, 13, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 6, 97, 109, 97, 122, 111, 110, 3, 99, 111, 109, 0, 0, 1, 0, 1]
const u8[38] wire_format = [100, 65, 48, 66, 65, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 66, 109, 70, 116, 89, 88, 112, 118, 98, 103, 78, 106, 98, 50, 48, 65, 65, 65, 69, 65, 65, 81]

//    for u32 i in 0..28 do
//         ok = ok && (dns_labels_rev[i] == decoded_b64[i])
//     endfor 

def main(private u8[16] key, private u8[12] nonce, field comm, u32 SN, u8[500] dns_ct, field root, private u8[255] left_domain_name, private u8[255] right_domain_name, private u32 left_index, private u32 right_index, private field[21] left_path_array, private field[21] right_path_array, private u64 left_dir, private u64 right_dir) -> bool:
    field key_field = pack_u8_arr(key)
    field iv_field = pack_u8_arr(nonce)
    field comm_cal = generate_poseidon([key_field, iv_field])

    bool comm_ok = (comm == comm_cal)

    u8[4] SN_u8 = u32_to_four_u8(SN)
    for u32 i in 0..4 do
        nonce[12 - i - 1] = nonce[12 - i - 1] ^ SN_u8[4 - i - 1]
    endfor

    u8[500] dns_query = aes_gcm_encrypt::<500>(key, nonce, dns_ct)

    u8[2][255] extraction_values = extractDoHGETReverse(dns_query)

    u8[255] dns_labels_rev = extraction_values[0]

    bool merkle_test = comm_ok && check_wildcard_python_path::<21>(dns_labels_rev, root, left_domain_name, right_domain_name, left_index, right_index, left_path_array, right_path_array, left_dir, right_dir)
    assert( merkle_test) 
    return true