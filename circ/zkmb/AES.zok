from "Util.zok" import u8_from_field, pack_u8_arr, u32_to_four_u8, four_u8_to_u32, rev_bytes_32, xor_arrays, array_u8_to_u32, array_u32_to_u8, shift, u32_to_u8, u8_to_u32, u8_to_bits

import "../third_party/ZoKrates/zokrates_stdlib/stdlib/utils/casts/field_to_u8.zok" as field_to_u8
// The following file performs functions required for AES GCM 128 
// Some functions from the aes example from xJsnark are used as is below. 
 
// returns the bytes of 'iv || index' for the given block_number 

const field[16][17] sbox_coeff = [[99, 3259564502830690096468381594760293224139182997396699588765009021368346174900, 2017305311142065711702698766647730413514249962634354008658964950488445742762, 3456717979396546126769994762239693915022039790688048442975385944840614868614, 6263396792123420734902689357529450833914753182306062756142000657342571152417, 1583807991493858058708789879669179283999609897684521434963905356140074098327, 7003718777358818150765812732591933670148064292991408794958461755913985131801, 2177710992767448818355093378800819412271265469658009238238694225973164798579, 2350515874231003240823090540314784441498044572261672626770127170344582995114, 664121570535881992852017540101257293768944361058253144412327469044237809884, 6943064714594654092454257623280127857892791356425618196599810778216200304377, 1208594494013949819344987563009608141401462444878242097211862250302859323461, 2945823705255017900444731164450879152837719383311634550774590793314017147721, 4979000194885856282671592873523921575039503151964447428284971957608639517793, 1424197134624069024799466067357070593622842687588879490103847647522014427701, 4381499006072555446748702097024209876929340964811501443153696589578426263497, 0],
[202, 4386807046552689980113389258717456246503790448978435114142102778072649021354, 314175358476955598631084273162945679251265213691528555599901941045157999609, 4263532301138180098277672650577429752461509662838361239921230506852399794056, 5192600090738391450772067295681653229989718183902470116418312790314656907500, 4402722097252349090526960837849661328897357948773215050017566330096476396742, 1731320828827269780698731339007580786628491458935257664765644287190337975163, 3786843090902629018278551266668329724842585106864899019753800846145212877962, 4675038135425891670099030892528221765589545711599077494247225007358634187183, 494410467613968916619102632315001682388115431054869018837251774119190461251, 1162737934465960927131729329114301359239990870980320392316861687782077339812, 4751701259650684720381726674340348581167590353917394537413490929308735447154, 6048879768195380231897236388823859348396107874048030775075944132210943541010, 2357149129359201739821763270705651925731807196736171896920542221247874012897, 2586264615866936982689680170810420553476229764983037819581962968954554160189, 4504856916859345291873579660998097721435709288356284547001818367299279634969, 0],
[183, 1600371121800506836411669619331593872959437078373364017134780409371266421447, 578582365252303837608383668877951713896438415707895311270483093110469732362, 1330357197562111237973078205356334362607776894974140648770131921856966149542, 2270739466220485737710725180814170507597389382587688047508513008790539628876, 4967110415536527596854158902502187490916271487877650395433113437239148772527, 3943048226310635357774682878287237901482560164419205780048187904373771606326, 2710707998709076292098988124242749353459045458155249751481966999498632115396, 6308239778287759363211612641141744819903274343706992249838265920788286341556, 6296099405638605609634931308825002660523501622937934008686449551371741039086, 1378830165205398037147049775182117900077980921558776291543208200262077475132, 327497186810844838891971168622614082961561127218433626236554043876654457489, 7227089636139197232543411161556798200502155085983642866238076731123963874414, 3229369967170266194475381513210832372835676318767689024717766435590811304128, 4487094581007075923694383268961679111550764175522271559117956407253989560, 1249503438768848035579380847037668526308079089835261345545090016051142598163, 0],
[4, 3522326687795212570682015663443983247025670150371854187269086960308647439498, 2906758472664686332778443613507539706058947898576463064582024857196488228383, 4782774259680504178201872500266693892448216474004181448768493485556685321775, 3897116480216738152282115438261126519521616780721300045555915095492960781592, 6096863445289730526285587554954063349260623091468267298223291736866527070209, 2977622215899796960980085957537971034912605376420136793065127088159556169321, 4613087998215957504659481428791729442476771460558031527671801923326604793783, 812180602475324169579440357865077614003502665012951913742349172816657451696, 6680886456742712354760834057290175722015277701307133305022022334449525165835, 6894048035206572508537567768843762034654262657138286484335164122666957739739, 99987755714159039660285617371614815310201904903656902928596408697137635517, 4452130631232677734897690112126585269475433885835737653677292389554881890219, 1789652709251780510690208947265316217871658280026970862910589499603434288654, 7008165871633252996837403004029914784802096173814754469049931027254313159655, 1362442996638992170952460482788400277020046374879534891213921404333256872231, 0],
[9, 2717652641084842156680801213427314656608690079643598726182156751086698152725, 1668123875520264554087940958799867957364410473438554391063161898108069758654, 4469490850088140713169217858283568714709901690368879701616993092868681101034, 3757667312176668771002450776651874070694607260439961509528998645025111407491, 6410360102342812944136834943238889510977856977811917620204156457648538524520, 5780175460739864879003225710520965694202837678538395260607462594064126682748, 4322418304456261134029796692071853247191038366782920423404690842354316171516, 2730961236872706191932653195052530735965324925320741380780090841197505832502, 5873111167228444473006161037273382511467089829417812783472130613993530094772, 3081214754858613810725240979887466996437719766796985924288570101154114691185, 5260433099049400167694490013009644922672863655738098856619325573774046731444, 6703840326429710732123361436272158824738770665087284424317093286981164913285, 6690670394375563786763929882968074998877137124432781728703519598482047050456, 1607536554065088810031279913465615563596236488207753730421450917468996212713, 4059394116701976801371294456463739762209562252393481992807757230362140933978, 0],
[83, 4244059139893577648509100741428884809429719011853137125288007242304714158233, 420211878968829566968686370995390297176645242459687946390589443971716039644, 295335094292449980310762331604133050043688767006266307110216371757334067010, 3481598499848690306169544284546097589733617472288517863619153666826458906208, 6495214328750533547968916153959278288891821516391845380708736093887556569412, 4689153194245456802037308507222004307550738616735697375737519834163684487035, 5421429237518438127097596719834984971704304026634771773854814933513987317359, 1139869570732273767793738362085772494436633148322501120382267980586022195484, 3678859325088253930802492909432265201280554438048322988243865100064538049875, 7227558294896299626580813836747428695598318162100528039573582035317373970832, 677828767285544074185459360597561941812812024933299702774311606142709951960, 4173260306349871870629608054653931495724388340755602373443573508315649815395, 3212868003322175350798089918546693264176272846878756059748419784247223674679, 579364986955364701739860272878357842351008095477188098859166345675456771938, 4922428413178076196220328116768175436089292805773231086279432621223753781985, 0],
[208, 459432169476718178124832359314947772361217257613314869304325207057266122727, 6363194360904900489249321453998247720328914538172344628440583612848912940292, 1048742184764988884859115419780901152006501028695927397976970212540187826595, 2773028762967762708895821480502855426626484240813322952447495784184410822838, 3957559910057987586693432208386582564405806748020311086006538608288720744412, 2600869677881668443714458951991665789185768262758513970377854190883038350149, 6048894320218877788461882015284239934968859027445514505292452485305683530620, 1412106197441964393260344167653974826937100127318696522267840891961118124819, 4627286305056391527401941769231107302975115787578723402424658398831512720835, 3137181988315423116164031496811881763889696583009609434022954539444689887891, 172597675368965075391384441361725897502232658130968558845997175344880122224, 4616144471086127558232202090562114435462288488180729678415440000827709151862, 4157387838822038466423988660652278530589952166119681678829675430236660210385, 4426994062065071039389973329129739880569655017576459435034659263849208987391, 4857619116896950241549576096638696688190222584225235122326210766394180213914, 0],
[81, 5740060414914764452936036620700165548107508755007005693903550946641377698726, 4902013971747611303838918325912587647803997420244058360964350219404629872257, 1587490080013708795768121790043856767199189349660172653842984512637895595476, 3498974990780154340442993745976695116322966359244885325223779028824275368921, 3084209183077776701340660659181092428786801542775344203247698883463463837460, 4580643315279334806091686878739458942329304038811970196990414597560724973713, 1204729344625251560619548103869931521456847093951791220289464634302521079598, 851894350550699772492925087568716786006261937083501920337543987911286001345, 7074961691444712104683460909352529915060152477013089574925937202170857279104, 1472029197741109138424654410629771556173112884975356638967186904376887642034, 3337494362342432547632017664954596739043799233150174749470021254334318410720, 6995726596549140047963528552133974243063687535800270852152089205139438811729, 4680752231876803239229941314005897365181740576577901982028031727893419871853, 3028237098014868339651445969689275551300577081669633326371464340781846304835, 5856827789699730560669552471585403799020984589074104149301090060840691260223, 0],
[205, 7137857235298492154725807214442308086547227405372085972494259652398243399458, 2737661762855241306329574620062726430106510445579663161196317077477145546644, 1384649147939996907799350146001255423778962500809341461092223590093463461074, 3063605864662114910477700125952726002817336194019443790743818605946445259081, 505236948986427643294743845892151193015929632038971939305299796656692030605, 3708586436684235792889693159457082451628821612767883263583842566773446392911, 1908153503120433255853237988556675204086290447018961464568671485382197673962, 346926177110920717638593921574143556236968853122159051087559746303279432031, 1233462597154814283587873395560024446556407425509991730906702084848949752811, 4407932300824433578948321186818513421771260788118146006193380742376037762584, 1734231671673880691281818966955666646266740601953575289492764370308339301117, 1284433419801635059310472246133276543721618709553728843392304578446195660229, 1749264442875769088152930924854659517601378174955076606986369236224228860364, 2543367981392074169338611147609017195860274295288744898807654028391085903793, 2439658396280841510237203925344745084289854710791764550158587129801520818088, 0],
[96, 3798725033229844396775125239054929882992249383511341556514854666945406917549, 3791104887787813024473699000588153380829068956190671356372913969353785815299, 2509031963088123631787729029327653530359641798118971960841096988146050205428, 904477875400240933768458866196227895928772403713648703626190162479726472090, 2679310730084057510718658889678392232908378151146184696874300927101309724596, 4336993837819223925896422880240066971435154883937920253824344955926898438910, 31032723187510551252452602072495929582257084085300110771693155939807414353, 3188515716909422790103424268899914722718594814652058420143685550565760250460, 7223570903761829680323983050616819528742131838794093348639726131049426849643, 6375715393175221082055870030854151364090066643557429008095342862285476353625, 2661925548731500767115584062952749632711159601513680213341450330945236112293, 1286082016252214273359030982050232901284056091737392650315379814271155104856, 4266674659130187765404371703808609907070779577045730934352260306620752652493, 1828127004652650612262653660300235486285635284350602425627995499973559874854, 5777750748115994552514841674660326319061868003304327602672421246393827570507, 0],
[224, 966902182612496105433325120058463760462611622374028836714868270270539077545, 5686562464782313207535540157359740145160600058568754645832421264364118509480, 5497866682305452366247489012538258640965651874391440883551776374172456739546, 2388219576082232530570762461198943102416139892493460878595475728773677676293, 4120405246850025377066460351352160369332662003214941438381058913194440875871, 4160303979335835051558742904912627744851236223954525719112075285702035126764, 2452405563768182223566346595491285902399392995376396941088313561946732926701, 6886785713576159897739257507684262607404070741845066428879288279663193820059, 7107672443416367666873210156844646901004968010183577788200573844461352525583, 4539921780311782426911065345197233593674815536933505273526119122755511097526, 4118100836353324597301428616781706088283719647427640466756523460776920932621, 1070591474794429810592781050920737872783697093394365871013591434154683085273, 3275911656640579599307336452486580745399383728195599387217125235666543753427, 597134531780164823998003543376934776709347710639997804047857168585870902835, 5027260486048752027083743228140371676008633736045958485098539561795556958214, 0],
[231, 6244337277071532973839762657435678883072327802026734520595495080452976500254, 5946639304449124267198534824721336292633040044063619853759132987742903143810, 2184217834117288610888113942601174716830121933720216167321144341376983492423, 3109921639134549121777669400244233213993910811900330789790383838044524615867, 5657824449427196732669005721421786848062689419389325443193038904629569133292, 3711183213675385681675088952374106141393422225530488694588209953683047060401, 1598347355058323030451766685854886217184547046886336233227489910298770810147, 3239965270660463147310835814709051225049359140825820508848689076402611068656, 226073394696806073247410331641336757710852521038092208293252942624050308529, 5323448091271643679694728702371838281549446864380721802524916102674964551862, 4101093391184060752507358584799189199681784420209708812916395626527659231287, 6929753057837103913910523638887367981069217366104498861080960035520936455505, 661933382649932289240120318487945017792996330125982671648829772826615594091, 687111732300779044325364918864043827740068984714149913415511759072829443239, 1037189647791646179076021446886985082236029604743326760810206236119738347529, 0],
[186, 4865799776114660748415849222961929705374594873130866505835832747628222197582, 5535066959747146401000026141565687585403622087249251137384395750436097730835, 4203461340406408692416116741625039451151141502990210150328018211959287302709, 6877576166950570871884630732727531306172000092737037569240423835818012843489, 5910095720042933985816706843387914910568712716969869267634919161477533620763, 4342357906565870569764418695420217794529058844099574838854550509840131972634, 2195124206469267406343055032314408169582603233701683107177715022854603101659, 2419432364993353148014748023982310992159112040916221485618966876131206237444, 384450231816507996884511678151882308771375614889804287898099637213029512269, 3799422028222113769788602526356064498626840916082254853611782319896804868869, 66367092509241864029422403468798713962723494737379567212721782849058504775, 6253392450975881757840719915116083851835790872195476536367615592983652032034, 1842941122382491792104902988572942076272479033582921479153957349696441008359, 6957780009206374551572786780047075175559156943619721608932019806321365362253, 2242777242255274155908994778646067386887718608136988452764588901178187712172, 0],
[112, 6807938466221973108074815126370184905870124764812941999380151399500714476459, 865603842965366073895081276424896035388527211838719094982093392565166708312, 3952178944428831735049647811755307178671849184345897319472954516622809149847, 3930120197555824276837316179863075010949359157132045401918994729705942072482, 5019509514990899690454226113385381989331818148952492163645994267301187216319, 3771458022353546281029314576921966477805954771803526294959535083257458711396, 5155932331514852967222649778169581263235821334973427129453562814990078726741, 5604547295271243919881137315240735293757373054683167031391451674082221297996, 4468351112410421876211389666521933874172994622771612919852493967865747042665, 5790948138152110369631664449521380130717488028571808639020460611310867210604, 4980845062022116129829993790198392109190387509415477724031597863593570776507, 1173341781713914901063543164621181068649043958192987679740720485450511899939, 1314826999955916278022629911691252437824643097898209061748827903706146928644, 574997453984780819581502726535748705303602895917468675992596838484196659838, 4485445455116299285000580617122937445987943133729479712424171957847015130113, 0],
[225, 6790446425324380699404677914980434522964734187753834719091474245356951179373, 7112768335339922245885407606972602065391167814285807440304581568237261866818, 124051627539990946460759733135524474072144788023527491715660875677154777513, 793059001863204031136349348443900763566821741535015053981159708855242734402, 2045349678484983031708781956423487794682082979515175751722907590749145157510, 4591151412277506016851559211191143669141218761612227233249239630490020153310, 6954761495608921332945244507364434679979735162280163814280436598225958016768, 5353354510071552347207333028526548120816560686211481624532370756081658234319, 5191418452257158557109077142999114492994584029288901304686633608604450397092, 5188797933304946726483357731403992300923564210923894909741654862728819016313, 1987092372517594262836347868463037687164940424134955779769213268914808296510, 1619667962076266717178977793078948755967025148813869969374111201392690724618, 5975397459157917442187424053129278909856974043117019497380711770944806965783, 670720365729519664163168251033344167193548894447380389823710556213397284981, 3498007587104233690227026357198161522141828003096005868361741263811269202625, 0],
[140, 4982781565125539945320038954701649545126489375277020245998340695834218436260, 2065282858853468514772606385222538651033324621808237349615644722637631653982, 624970511464696357630758606802836702086801998573506394395753194799229150620, 5145887385210763116544563951446779930798623785375769765323184707372131705847, 3818657841696282475994737605575386748817852011674687223224186418106034418667, 5080912028688474155014201287209892724068285985039668664799727056791593606384, 5030209596464915408414829503410631131716843788444501069763458019441381321121, 5605398824446691525926184222749416177479404282818880004085418674757876058159, 3102906716292662282846116803225554121209159061458638633447841277262834866376, 3444582216262968190846100512426145301367682080376210103285555320074643096865, 2411067327692833740965034653135292613839854635916519335481301761697942121411, 3057474116871411149524178517993480542919771889217319419213174295400404465661, 4616803537299434280752608257572454745473467378156817125087285457703923604475, 929982090329141096278318093602226515332814613193591314684123506964808403541, 742122424626553256982028586226674234729439008327986593608661459153526847575, 0]]

def prod_vector<LEN>(field[LEN] a, field[LEN] b) -> field:
  field output = 0
  for u32 i in 0..LEN do   
    output = output + b[i] * a[i]
  endfor 
  return output 

def query_sbox2(u8 index, u8 i2) -> u8:
  assert(index < 120)
  field r_field =  pack_u8_arr([index*16 + i2])
  field r2_field =  pack_u8_arr([index*21 + i2])

  field[17] r_vector = [1f; 17]
  for u32 i in 0..16 do
    r_vector[i+1] = r_field ** (i+1)
  endfor 

  field[16] prod_values = [1; 16]
  for u32 i in 0..16 do 
    prod_values[i] = prod_vector::<17>(sbox_coeff[i], r_vector)
  endfor 
  

  field prod_prod = 1f
  for u32 i in 0..16 do
    prod_prod = prod_prod * prod_values[i]
  endfor 

  return field_to_u8(prod_prod)

// // CONSTRAINTS: 225
// def query_sbox(u8 index) -> u8:
//   // return 0
//   u8 q = index/16
//   u8 r = index%16

//   field r_field =  pack_u8_arr([r])

//   // create vector using r
//   field[17] r_vector = [1f; 17]
//   // CONSTRAINTS: 70 
//   for u32 i in 0..16 do
//     r_vector[i+1] = r_field ** (i+1) // TODO: convert to field here
//   endfor 
//   // r_vector[1] = r_vector[0] * r_field
//   // r_vector[2] = r_vector[1] * r_field
//   // r_vector[3] = r_vector[2] * r_field
//   // r_vector[4] = r_vector[3] * r_field
//   // r_vector[5] = r_vector[4] * r_field
//   // r_vector[6] = r_vector[5] * r_field
//   // r_vector[7] = r_vector[6] * r_field
//   // r_vector[8] = r_vector[7] * r_field
//   // r_vector[9] = r_vector[8] * r_field
//   // r_vector[10] = r_vector[9] * r_field
//   // r_vector[11] = r_vector[10] * r_field
//   // r_vector[12] = r_vector[11] * r_field
//   // r_vector[13] = r_vector[12] * r_field
//   // r_vector[14] = r_vector[13] * r_field
//   // r_vector[15] = r_vector[14] * r_field
//   // r_vector[16] = r_vector[15] * r_field

//   field[16] prod_values = [1; 16]
//   // compute all inner products
//   // CONSTRAINTS: about 40 
//   for u32 i in 0..16 do 
//     prod_values[i] = prod_vector::<17>(sbox_coeff[i], r_vector)
//   endfor 
  

//   field prod_prod = 1f
//   for u32 i in 0..16 do
//     prod_prod = prod_prod * prod_values[i]
//   endfor 

//   field fake =  pack_u8_arr([index/21])
//   field fake2 =  pack_u8_arr([index%21])

//   // CONSTRAINTS: < 60 
//   // return u8_from_field(prod_values[q])
//   return u8_from_field(prod_prod * fake * fake2)

def get_block_iv(u8[12] iv, u32 block_num) -> u8[16]: 
  u8[16] block_iv = [0; 16] 
   
  for u32 i in 0..12 do 
    block_iv[i] = iv[i] 
  endfor 
   
  for u32 i in 12..16 do 
    block_iv[i] = u32_to_u8((block_num + 2) >> (8 * (15 - i)))
  endfor 
   
  return block_iv 


// CONSTRAINTS: 225
def query_sbox(u8 index) -> u8:
  // return 0
  u8 q = index/16
  u8 r = index%16

  field r_field =  pack_u8_arr([r])

  // create vector using r
  field[17] r_vector = [1f; 17]
  // CONSTRAINTS: 70 
  for u32 i in 0..16 do
    r_vector[i+1] = r_field ** (i+1) // TODO: convert to field here
  endfor 
  // r_vector[1] = r_vector[0] * r_field
  // r_vector[2] = r_vector[1] * r_field
  // r_vector[3] = r_vector[2] * r_field
  // r_vector[4] = r_vector[3] * r_field
  // r_vector[5] = r_vector[4] * r_field
  // r_vector[6] = r_vector[5] * r_field
  // r_vector[7] = r_vector[6] * r_field
  // r_vector[8] = r_vector[7] * r_field
  // r_vector[9] = r_vector[8] * r_field
  // r_vector[10] = r_vector[9] * r_field
  // r_vector[11] = r_vector[10] * r_field
  // r_vector[12] = r_vector[11] * r_field
  // r_vector[13] = r_vector[12] * r_field
  // r_vector[14] = r_vector[13] * r_field
  // r_vector[15] = r_vector[14] * r_field
  // r_vector[16] = r_vector[15] * r_field

  field[16] prod_values = [1; 16]
  // compute all inner products
  // CONSTRAINTS: about 40 
  for u32 i in 0..16 do 
    prod_values[i] = prod_vector::<17>(sbox_coeff[i], r_vector)
  endfor 
  

  // field prod_prod = 1f
  // for u32 i in 0..16 do
  //   prod_prod = prod_prod * prod_values[i]
  // endfor 

  // CONSTRAINTS: < 60 
  // return u8_from_field(prod_values[q])
  return u8_from_field(prod_values[q])

 
// // same as above but the block_number is given as u8 
// def u8[] get_block_iv(u8[] iv, int block_num) { 
//   return get_block_iv(iv, u8(block_num)); 
// } 
 

 
// The following functions are from the aes example file from xJsnark 
// with only slight modifications. 
 
 
const u8[256] SBOX = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
 
const u8[11] RCON = [0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36]
 
const u8 nb = 4 
const u8 nk = 4
  
 
def rotWord(u8[4] w) -> u8[4]: 
  u8[4] newW = [0; 4] 
  for u32 j in 0..4 do 
    newW[j] = w[(j + 1) % 4]
  endfor 

  return newW
 
 
def subWord(u8[4] w) -> u8[4]:
  u8[4] newW = [0; 4] 
  for u32 j in 0..4 do 
    // newW[j] = SBOX[w[j]] 
    newW[j] = query_sbox(w[j])
  endfor 
  return newW 
 
 
def subState(u8[4][4] state) -> u8[4][4]: 
  u8[4][4] newState = [[0; 4]; 4]

  for u32 i in 0..4 do 
    for u32 j in 0..4 do
      // newState[i][j] = SBOX[state[i][j]] 
      newState[i][j] = query_sbox(state[i][j])
    endfor 
  endfor 
  return newState 
 
 
 
def gal_mul_const(u8 x, u8 c) -> u8:
  u8 p = 0 

  for u32 counter in 0..8 do 

    p = if ((c & 1) != 0 && (c!=0)) then p^x else p fi 

    c = c >> 1

    // Instead of a break, we just don't change p if c becomes 0 
    // if (c == 0) { break; } fi 

    
    // bit[] xBits = x.bits; 
    bool[8] xBits =  u8_to_bits(x)
    // 0th is the highest value bit  
    
    bool hi = xBits[0] // TODO: should this be 0 or 7 ??
    x = x << 1
    u8 tmp = x ^ 0x1b
     
    // this is a runtime circuit condition 
    // if (hi) { 
    //   x = tmp; 
    // } 
    x = if hi then tmp else x fi 

  endfor 

  return p
 
 
 
def shiftRows(u8[4][4] state) -> u8[4][4]: 
  u8[4][4] newState = [[0;4]; 4]

  for u32 j in 0..4 do
    newState[0][j] = state[0][j]
    newState[1][j] = state[1][(j + 1) % 4]
    newState[2][j] = state[2][(j + 2) % 4]
    newState[3][j] = state[3][(j + 3) % 4]
  endfor 

  return newState
 
 
def mixColumns(u8[4][4] state) -> u8[4][4]:
  u8[4] a = [0; 4] 
  u8[4][4] newState = [[0;4]; 4] 

  for u32 c in 0..4 do 
    for u32 i in 0..4 do
      a[i] = state[i][c]
    endfor 
    newState[0][c] = gal_mul_const(a[0], 2) ^ gal_mul_const(a[1], 3) ^ a[2] ^ a[3] 
    newState[1][c] = a[0] ^ gal_mul_const(a[1], 2) ^ gal_mul_const(a[2], 3) ^ a[3] 
    newState[2][c] = a[0] ^ a[1] ^ gal_mul_const(a[2], 2) ^ gal_mul_const(a[3], 3) 
    newState[3][c] = gal_mul_const(a[0], 3) ^ a[1] ^ a[2] ^ gal_mul_const(a[3], 2) 
  endfor 

  return newState
 
// 'to' isn't actually used though

def addRoundkey(u8[176] expandedKey, u8[4][4] state, u32 from_ip, u32 to) -> u8[4][4] :
  u8[4][4] newState = [[0;4]; 4] 

  for u32 j in 0..4 do 
    for u32 i in 0..4 do
      newState[i][j] = state[i][j] ^ expandedKey[from_ip + (j * 4 + i)]
    endfor 
  endfor 

  return newState

// def RAM <u8> sBoxMem; 
 
 
def expandKey(u8[16] key) -> u8[176]: 
  
  // u8 nr = nk + 6; 
  // nr = 10
  // u8[] expandedKey = [0; nb * (nr + 1) * 4]; 
  // u8[][] w = new u8[nb * (nr + 1)][4]; 

  u8[176] expandedKey = [0; 176] 
  u8[44][4] w = [[0; 4]; 44]
  
  for u32 i in 0..4 do 
    w[i] = [key[4 * i], key[4 * i + 1], key[4 * i + 2], key[4 * i + 3]]
  endfor 

  // while (i < nb * (nr + 1)) { 
  for u32 i in 4..44 do 
    u8[4] tmp = w[i - 1] 

    tmp = if i % 4 == 0 then rotWord(tmp) else tmp fi 
    tmp = if i % 4 == 0 then subWord(tmp) else tmp fi 
    tmp[0] = if i % 4 == 0 then tmp[0] ^ RCON[i / 4] else tmp[0] fi 

    for u32 v in 0..4 do
      w[i][v] = w[i - 4][v] ^ tmp[v] 
    endfor 
  endfor 


  for u32 k in 0..44 do 
    for u32 j in 0..4 do 
      expandedKey[k*4+j] = w[k][j] 
    endfor 
  endfor 

  return expandedKey 




 
def encrypt_expanded<MSG_LEN>(u8[176] expandedKey, u8[MSG_LEN] plaintext) -> u8[MSG_LEN]: 
  u8[MSG_LEN] ciphertext = [0; MSG_LEN] 
   
  u8[4][4] state = [[0;4]; 4] 


  for u32 j in 0..4 do 
    for u32 k in 0..4 do 
      state[k][j] = plaintext[j*4 + k] 
    endfor 
  endfor 

  state = addRoundkey(expandedKey, state, 0, 3) 

  // int nr = 6 + nk; 
  
  for u32 round in 1..10 do 
    state = subState(state) 
    state = shiftRows(state)
    state = mixColumns(state)
    state = addRoundkey(expandedKey, state, round * 4 * 4, (round + 1) * 4 * 4 - 1)

    // Note: the methods substate(), shiftRows(), mixColumns(), addRoundKey() could be also be  
    // written in a way that updates the state array directly in place. 
  endfor 

  state = subState(state)
  state = shiftRows(state)
  state = addRoundkey(expandedKey, state, 160, 176)
  
  for u32 j in 0..4 do 
    for u32 k in 0..4 do 
      ciphertext[j*4 + k] = state[k][j]
    endfor 
  endfor 
   
  return ciphertext 


  
 
// def aes_encrypt<MSG_LEN>(u8[16] key, u8[MSG_LEN] plaintext) -> u8[MSG_LEN]:
//   //  expand the AES key 
//   u8[176] expandedKey = expandKey(key) 
   
//   return encrypt_expanded(expandedKey, plaintext) 
 
// This encrypt function is modified from the basic AES encryption example in xJsnark 
// augmented to perform the GCM encryption. 
// starting_block is the index of the first block "iv || starting_block" to use to generate the pad for decryption. 
 
def aes_gcm_encrypt_middle<MSG_LEN>(u8[16] key, u8[12] iv, u8[MSG_LEN] plaintext, u32 starting_block) -> u8[MSG_LEN]:
  u8[((MSG_LEN-1)/16 + 1) * 16] pad = [0; ((MSG_LEN-1)/16 + 1) * 16] 
   
  u8[176] expandedKey = [0; 176]

  expandedKey = expandKey(key)
   
  // This part contains the operations required for GCM 
  u8[16] block_iv = [0; 16] 
  u8[16] block_pt = [0; 16] 
  u8[16] iv_cipher = [0; 16]
   
  for u32 i in 0..((MSG_LEN-1)/16 + 1) do
    block_iv = get_block_iv(iv, i + starting_block)     
    iv_cipher = encrypt_expanded(expandedKey, block_iv) 
    for u32 j in 0..16 do 
      pad[i * 16 + j] = iv_cipher[j]
    endfor 
  endfor 
   
  // CAUTION: should be ((MSG_LEN-1)/16 + 1) * 16 here, but circ can't parse that now
  return xor_arrays::<MSG_LEN, MSG_LEN>(plaintext, pad)
 
// This performs the aes_gcm encryption algorithm starting at block 0 (the default) 
 
def aes_gcm_encrypt<MSG_LEN>(u8[16] key, u8[12] iv, u8[MSG_LEN] plaintext) -> u8[MSG_LEN]:
  return aes_gcm_encrypt_middle::< MSG_LEN>(key, iv, plaintext, 0)
 
// AES GCM decryption starting at block 0 
 
def aes_gcm_decrypt<MSG_LEN>(u8[16] key, u8[12] iv, u8[MSG_LEN] ciphertext) -> u8[MSG_LEN]:
  return aes_gcm_encrypt::< MSG_LEN>(key, iv, ciphertext)
 
// AES GCM decryption starting at block starting_block 
 
def aes_gcm_decrypt_middle<MSG_LEN>(u8[16] key, u8[12] iv, u8[MSG_LEN] ciphertext, u32 starting_block) -> u8[MSG_LEN]:
  return aes_gcm_encrypt_middle::< MSG_LEN>(key, iv, ciphertext, starting_block)
 
// This peculiar function decrypts two blocks of ciphertext 
// with the pad generated at block number starting_block 
// and at an offset of length offset within that starting block. 
// This is used at one point in the TLS Key Schedule Shortcut method  
 
def aes_gcm_decrypt_128bytes_middle<MSG_LEN> (u8[16] key, u8[12] iv, u8[MSG_LEN] ciphertext, u32 starting_block, u32 offset) -> u8[MSG_LEN]:
   
  u8[MSG_LEN] zero_plaintext = [0; MSG_LEN]
    
  // this would be the pad staring at starting_block  
  u8[MSG_LEN] pad = aes_gcm_decrypt_middle::<MSG_LEN>(key, iv, zero_plaintext, starting_block)
   
   
  // u8[] pad_offset = [0; 128]
  // RAM <u8> pad_ram = INIT_RAM <u8>(u8(pad))
   
  // // this if the offset of that pad  
  // for (int i = 0; i < 128; i++) { 
  //   pad_offset[i] = pad_ram[u8(i) + offset]; 
  // } 
  
  u8[MSG_LEN] pad_offset = shift(pad, u32_to_u8(offset))
  return xor_arrays::<MSG_LEN, MSG_LEN>(ciphertext, pad_offset)
 

// const u8[160] true_pt = [71, 69, 84, 32, 47, 100, 110, 115, 45, 113, 117, 101, 114, 121, 63, 100, 110, 115, 61, 100, 65, 48, 66, 65, 65, 65, 66, 65, 65, 65, 65, 65, 65, 65, 65, 66, 109, 70, 116, 89, 88, 112, 118, 98, 103, 78, 106, 98, 50, 48, 65, 65, 65, 69, 65, 65, 81, 32, 72, 84, 84, 80, 47, 49, 46, 49, 13, 10, 72, 111, 115, 116, 58, 32, 99, 108, 111, 117, 100, 102, 108, 97, 114, 101, 45, 100, 110, 115, 46, 99, 111, 109, 58, 52, 52, 51, 13, 10, 65, 99, 99, 101, 112, 116, 45, 69, 110, 99, 111, 100, 105, 110, 103, 58, 32, 105, 100, 101, 110, 116, 105, 116, 121, 13, 10, 97, 99, 99, 101, 112, 116, 58, 32, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 100, 110, 115, 45, 109, 101, 115, 115, 97, 103, 101, 13, 10, 13, 10]

const u8[160] true_pt = [0x47, 0x45, 0x54, 0x20, 0x2f, 0x64, 0x6e, 0x73, 0x2d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3f, 0x64, 0x6e, 0x73, 0x3d, 0x52, 0x44, 0x41, 0x42, 0x41, 0x41, 0x41, 0x42, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x42, 0x6d, 0x46, 0x74, 0x59, 0x58, 0x70, 0x76, 0x62, 0x67, 0x4e, 0x6a, 0x62, 0x32, 0x30, 0x41, 0x41, 0x41, 0x45, 0x41, 0x41, 0x51, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31, 0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2d, 0x64, 0x6e, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x34, 0x34, 0x33, 0x0d, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x0d, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x6e, 0x73, 0x2d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0d, 0x0a, 0x0d, 0x0a]

// const u8[160] true_pt = [0xbd, 0x5d, 0xd4, 0x17, 0x9a, 0xb7, 0xde, 0xd1, 0x35, 0x9d, 0xaa, 0x71, 0x71, 0x47, 0x4e, 0xfc, 0x43, 0x88, 0xe2, 0xb5, 0x6b, 0xa4, 0x46, 0x9a, 0xd6, 0xc9, 0x9d, 0xe7, 0x9e, 0xc6, 0x86, 0xd8, 0xf8, 0x12, 0x81, 0xff, 0x0d, 0xe3, 0x7d, 0xb5, 0xcf, 0x4a, 0xb6, 0xef, 0xb6, 0xed, 0x46, 0x0f, 0xbd, 0x61, 0x94, 0xed, 0xbe, 0xe2, 0xbb, 0x3e, 0xd8, 0x64, 0xef, 0x69, 0x9f, 0xc7, 0x53, 0xda, 0x30, 0x55, 0x0b, 0x7c, 0x34, 0xd7, 0x83, 0x6c, 0xa1, 0xf8, 0x63, 0xee, 0x63, 0x24, 0x7a, 0x39, 0x5d, 0x26, 0xde, 0xca, 0x43, 0x23, 0xe0, 0x6a, 0xe7, 0x31, 0xe1, 0xdc, 0x27, 0x5d, 0x14, 0xf4, 0x3b, 0x9a, 0x2d, 0x07, 0x9b, 0xd3, 0x29, 0xaf, 0x2f, 0xeb, 0xfa, 0x7c, 0x58, 0xbb, 0xf4, 0xe2, 0x45, 0x94, 0x6e, 0x55, 0x2a, 0xd1, 0xad, 0xaf, 0xa1, 0xc7, 0xa1, 0x7b, 0x33, 0x3d, 0xaf, 0x2a, 0x8b, 0xc8, 0x45, 0x44, 0x79, 0x5a, 0xcf, 0x35, 0x22, 0xb7, 0xc7, 0x67, 0x07, 0x73, 0x95, 0x20, 0x83, 0x1b, 0xb8, 0x5f, 0x91, 0x13, 0x67, 0xac, 0x70, 0x3f, 0x01, 0xdd, 0x01, 0x1c, 0xa5, 0x70]

def main(u8[16] key, u8[12] iv, u8[160] ct) -> u8[160]:
  u8[160] pt = aes_gcm_encrypt::<160>(key, iv, ct)
  // bool ok= true
  // for u32 i in 0..160 do
  //     ok = ok && (pt[i] == true_pt[i])
  // endfor 
  // assert(ok)
  return pt 

// def main(u8[10] index, u8[1] kint) -> u8:
//   bool kludge = (kint[0] == 1)
//   assert(query_sbox(index[1]) == 0x4d)
//   // assert(query_sbox(index[1]) == 0x43 || kludge)
//   // assert(query_sbox(index[2]) == 0x43 || kludge)
//   // assert(query_sbox(index[3]) == 0x43 || kludge)
//   // assert(query_sbox(index[4]) == 0x43 || kludge)
//   // assert(query_sbox(index[5]) == 0x43 || kludge)
//   // assert(query_sbox(index[6]) == 0x43 || kludge)
//   // assert(query_sbox(index[7]) == 0x43 || kludge)
//   // assert(query_sbox(index[8]) == 0x43 || kludge)
//   // assert(query_sbox(index[9]) == 0x43 || kludge)
//   return index[0] 

