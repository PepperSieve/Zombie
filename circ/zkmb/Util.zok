from "EMBED" import u32_from_bits, u8_from_bits, u8_to_bits, u32_to_bits, u16_to_bits, u64_to_bits, u16_from_bits
import "../third_party/ZoKrates/zokrates_stdlib/stdlib/utils/pack/bool/pack.zok" as pack
import "../third_party/ZoKrates/zokrates_stdlib/stdlib/utils/pack/bool/unpack.zok" as unpack
import "../third_party/ZoKrates/zokrates_stdlib/stdlib/utils/pack/bool/unpack256.zok" as unpack256
// import "../third_party/ZoKrates/zokrates_stdlib/stdlib/utils/u32/nonStrictUnpack256.zok" as unpackfieldu32


def u8_from_field(field f) -> u8:
    bool[8] f_bits = unpack::<8>(f)
    return u8_from_bits(f_bits)

// def u8_from_field(field f) -> u8:
//     bool[8] output_bits = [false; 8]
//     // for u32 i in 0..8 do 
//     //     output_bits[i] = if (f % 2 == 1) then true else false fi 
//     // endfor 
//     output_bits[0] = if (f % 2 == 1) then true else false fi 
//     return u8_from_bits(output_bits)

def four_u8_to_u32(u8[4] arr) -> u32:
    bool[8] bits_arr1 = u8_to_bits(arr[0])
    bool[8] bits_arr2 = u8_to_bits(arr[1])
    bool[8] bits_arr3 = u8_to_bits(arr[2])
    bool[8] bits_arr4 = u8_to_bits(arr[3])
    return u32_from_bits([...bits_arr1, ...bits_arr2, ...bits_arr3, ...bits_arr4])

def u32_to_four_u8(u32 num) -> u8[4]:
    bool[32] u32_bits = u32_to_bits(num)
    u8[4] result = [0; 4]
    for u32 i in 0..4 do
        bool[8] u8_bits = [false; 8]
        for u32 j in 0..8 do
            u8_bits[j] = u32_bits[8 * i + j]
        endfor
        u8 num = u8_from_bits(u8_bits)
        result[i] = num
    endfor
    return result

def u64_to_eight_u8(u64 num) -> u8[8]:
    bool[64] u64_bits = u64_to_bits(num)
    u8[8] result = [0; 8]
    for u32 i in 0..8 do
        bool[8] u8_bits = [false; 8]
        for u32 j in 0..8 do
            u8_bits[j] = u64_bits[8 * i + j]
        endfor
        u8 num = u8_from_bits(u8_bits)
        result[i] = num
    endfor
    return result


def array_u8_to_u32<N, M>(u8[N] arr) -> u32[M]:
    assert(N == M * 4)
    u32[M] result = [0; M]
    for u32 i in 0..M do
        result[i] = four_u8_to_u32([arr[4 * i], arr[4 * i + 1], arr[4 * i + 2], arr[4 * i + 3]])
    endfor
    return result

def array_u32_to_u8<N, M>(u32[N] arr) -> u8[M]:
    assert(M == N * 4)
    u8[M] result = [0; M]
    for u32 i in 0..N do
        u8[4] u8_arr = u32_to_four_u8(arr[i])
        for u32 j in 0..4 do
            result[4 * i + j] = u8_arr[j]
        endfor
    endfor
    return result

def rev_bytes_32(u32 num) -> u32:
    bool[32] u32_bits = u32_to_bits(num)
    bool[32] rev_bits = [false; 32]
    for u32 i in 0..4 do
        u32 rev_i = 3 - i
        for u32 j in 0..8 do
            rev_bits[8 * rev_i + j] = u32_bits[8 * i + j]
        endfor
    endfor
    return u32_from_bits(rev_bits)

def xor_arrays<M, N>(u8[M] target, u8[N] bits) -> u8[M]:
    // TODO: does assert work in CirC?
    assert(M <= N)
    for u32 i in 0..M do
        target[i] = target[i] ^ bits[i]
    endfor
    return target

def shift_or_not<M, N>(u8[M] arr, bool flag) -> u8[M]:
    u8[M] result = [0; M]
    for u32 i in 0..M do
        result[i] = if flag then arr[(i + N) % M] else arr[i] fi
    endfor
    return result

/// M should be smaller than 256
/// shift to left
def shift<M>(u8[M] arr, u8 offset) -> u8[M]:
    bool[8] offset_bits = u8_to_bits(offset)
    arr = shift_or_not::<M, 1>(arr, offset_bits[7])
    arr = shift_or_not::<M, 2>(arr, offset_bits[6])
    arr = shift_or_not::<M, 4>(arr, offset_bits[5])
    arr = shift_or_not::<M, 8>(arr, offset_bits[4])
    arr = shift_or_not::<M, 16>(arr, offset_bits[3])
    arr = shift_or_not::<M, 32>(arr, offset_bits[2])
    arr = shift_or_not::<M, 64>(arr, offset_bits[1])
    arr = shift_or_not::<M, 128>(arr, offset_bits[0])
    return arr

def myreverse(u8[255] arr, u8 prefix_len) -> u8[255]:
    arr = shift(arr, prefix_len)
    u8[255] result = [0; 255]
    for u32 i in 0..255 do
        result[255 - i - 1] = arr[i]
    endfor
    return result

// reverse only prefix
def reverse<M>(u8[M] arr, u32 prefix_len) -> u8[M]:
    assert(prefix_len <= M)
    u8[M] result = [0; M]
    for u32 i in 0..M do
        // both branches are evaluated in zokrates, so arr can't access an out of bound index even in the "skipped" branch
        // when i is out of bound, set idx to a "safe" index
        u32 idx = if i < prefix_len then prefix_len - i - 1 else 0 fi
        result[i] = if i < prefix_len then arr[idx] else 0 fi
    endfor
    return result

// TODO: implement this
def xor_field(field a, field b) -> field:
    return 0

def u8_arr_to_bits<N, M>(u8[N] u8_arr) -> bool[M]:
    assert(N * 8 == M)
    bool[M] result = [false; M]
    for u32 i in 0..N do
        bool[8] current_bits = u8_to_bits(u8_arr[i])
        for u32 j in 0..8 do
            result[i * 8 + j] = current_bits[j]
        endfor
    endfor
    return result

def pack_u8_arr<N>(u8[N] u8_arr) -> field:
    bool[8 * N] bits = u8_arr_to_bits(u8_arr)
	field out = 0
	for u32 j in 0..(8 * N) do
		u32 i = (8 * N) - (j + 1)
		out = out + if bits[i] then (2 ** j) else 0 fi
	endfor
    return out

def compare_field(field a, field b) -> bool:
    bool[256] a_bits = unpack256(a)
    bool[256] b_bits = unpack256(b)
    bool ok = true
    for u32 i in 0..256 do
        ok = ok && (a_bits[i] == b_bits[i])
    endfor
    return ok

def u16_to_u8(u16 a) -> u8:
    bool[16] u16_bits = u16_to_bits(a)
    return u8_from_bits(u16_bits[8..16])

def u8_to_u32(u8 a) -> u32:
    bool[8] u8_bits = u8_to_bits(a)
    return u32_from_bits([...[false; 24], ...u8_bits])

def u32_to_u8(u32 a) -> u8:
    return u8_from_bits(u32_to_bits(a)[24..32])

def u32_to_u16(u32 a) -> u16:
    return u16_from_bits(u32_to_bits(a)[16..32])

def u16_to_u32(u16 a) -> u32:
    return u32_from_bits([...[false; 16], ...u16_to_bits(a)])

def u8_to_u16(u8 a) -> u16:
    return u16_from_bits([...[false; 8], ...u8_to_bits(a)])

def u8_to_field(u8 a) -> field:
    bool[8] bits = u8_to_bits(a)
    return pack(bits)

// test all the functions
def main(u8[255] arr, u8 prefix_len) -> u8[255]:
    return myreverse(arr, prefix_len)
    // u32[1] test1 = array_u8_to_u32([12, 3, 1, 1])
    // bool test1_result = (test1[0] == 201523457)
    // u8[4] test2 = array_u32_to_u8([201523457])
    // bool test2_result = (test2[0] == 12 && test2[1] == 3 && test2[2] == 1 && test2[3] == 1)
    // bool test3_result = (123 == u16_to_u8(123))
    // bool test4_result = (123 == u8_to_u32(123))
    // return test1_result && test2_result && test3_result && test4_result && x