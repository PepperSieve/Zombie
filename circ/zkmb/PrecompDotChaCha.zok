from "../third_party/ZoKrates/zokrates_stdlib/stdlib/hashes/poseidon/poseidon.zok" import generate_poseidon
from "ChaCha.zok" import chachaEncrypt
from "Util.zok" import xor_field, field_to_u8_array, pack_u8_arr, u32_to_four_u8, compare_field
from "LabelExtraction.zok" import extractDoHGETReverse
from "./membership_merkle/non_membership.zok" import check_wildcard_python_path


const u32 PAD_LEN = 255
const u32 NUM_FIELDS = 9 // ceil(255/31)
const u32 REMAINDER = 7 // 255 % 31

def main(private u8[32] key, private u8[12] nonce, field comm, u32 SN) -> field:
        field key_field = pack_u8_arr(key)
        field nonce_field = pack_u8_arr(nonce)
        field comm_cal = generate_poseidon([key_field, nonce_field])

        assert(comm == comm_cal)

        u8[4] SN_u8 = u32_to_four_u8(SN)
        for u32 i in 0..4 do
            nonce[12 - i - 1] = nonce[12 - i - 1] ^ SN_u8[4 - i - 1]
        endfor

        u8[PAD_LEN] pad = [0; PAD_LEN]
        pad = chachaEncrypt::<PAD_LEN>(key, nonce, [0; PAD_LEN], 1)

        // map 31 x 8 = 248 elements
        // then remanining 7 
        u8[NUM_FIELDS][31] reorg_pad = [[0;31]; NUM_FIELDS]
        for u32 i in 0..(NUM_FIELDS-1) do
            for u32 j in 0..31 do
                reorg_pad[i][j] = pad[i*31 + j]
            endfor 
        endfor 
        
        for u32 i in 0..REMAINDER do 
            reorg_pad[NUM_FIELDS-1][i] = pad[(NUM_FIELDS-1)*31 + i]
        endfor 

        field[NUM_FIELDS] packed_fields = [0f; NUM_FIELDS]
        for u32 i in 0..NUM_FIELDS do
            packed_fields[i] = pack_u8_arr::<31>(reorg_pad[i])
        endfor 

        field pad_comm = 0f
        for u32 i in 0..NUM_FIELDS do 
            pad_comm = generate_poseidon([pad_comm, packed_fields[i]])
        endfor 
        
        return pad_comm