/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef INTERPRETER_HEADER
#define INTERPRETER_HEADER

#include <iostream>
#include <vector>
#include <memory>
#include <stack>
#include <string>
#include <sstream>
#include <cassert>
#include "RegTree.H"
#include "../compiler/Absyn.H"

struct InterpreterData {
  // forest of regular expressions
  std::vector<RegTree> forest;
};

class Interpreter : public Visitor
{
  RegTree treeRet;
  char parseHex(char x);
  char parseSymb(Symb x);
  std::vector<int> parseRang(std::string s);
public:
  bool stringMatch, stringPreprocess;
  InterpreterData data;
  void visitReg(Reg *p);
  void visitExp(Exp *p);
  void visitRReg(RReg *p);
  void visitEConcat(EConcat *p);
  void visitEUnion(EUnion *p);
  void visitEStar(EStar *p);
  void visitEMore(EMore *p);
  void visitERepe(ERepe *p);
  void visitEMult(EMult *p);
  void visitEClas(EClas *p);
  void visitEAStr(EAStr *p);

  void visitListReg(ListReg *p);
  void visitListExp(ListExp *p);
  void visitListSymb(ListSymb *p);

  void visitSymb(Symb x);
  void visitRang(Rang x);

  void visitInteger(Integer x) {};
  void visitChar(Char x) {};
  void visitDouble(Double x) {};
  void visitString(String x) {};
  void visitIdent(Ident x) {};
};


#endif
