/* File generated by the BNF Converter (bnfc 2.9.4). */

#ifndef ABSYN_HEADER
#define ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.

/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string Symb;
typedef std::string Rang;


/********************   Forward Declarations    ********************/

class Reg;
class Exp;
class RReg;
class EConcat;
class EUnion;
class EStar;
class EMore;
class ERepe;
class EMult;
class EClas;
class EAStr;
class ListReg;
class ListExp;
class ListSymb;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitReg(Reg *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitRReg(RReg *p) = 0;
  virtual void visitEConcat(EConcat *p) = 0;
  virtual void visitEUnion(EUnion *p) = 0;
  virtual void visitEStar(EStar *p) = 0;
  virtual void visitEMore(EMore *p) = 0;
  virtual void visitERepe(ERepe *p) = 0;
  virtual void visitEMult(EMult *p) = 0;
  virtual void visitEClas(EClas *p) = 0;
  virtual void visitEAStr(EAStr *p) = 0;
  virtual void visitListReg(ListReg *p) = 0;
  virtual void visitListExp(ListExp *p) = 0;
  virtual void visitListSymb(ListSymb *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitSymb(Symb x) = 0;
  virtual void visitRang(Rang x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Reg : public Visitable
{
public:
  virtual Reg *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};



class RReg : public Reg
{
public:
  Exp *exp_;

  RReg(const RReg &);
  RReg &operator=(const RReg &);
  RReg(Exp *p1);
  ~RReg();
  virtual void accept(Visitor *v);
  virtual RReg *clone() const;
  void swap(RReg &);
};

class EConcat : public Exp
{
public:
  ListExp *listexp_;

  EConcat(const EConcat &);
  EConcat &operator=(const EConcat &);
  EConcat(ListExp *p1);
  ~EConcat();
  virtual void accept(Visitor *v);
  virtual EConcat *clone() const;
  void swap(EConcat &);
};

class EUnion : public Exp
{
public:
  ListExp *listexp_;

  EUnion(const EUnion &);
  EUnion &operator=(const EUnion &);
  EUnion(ListExp *p1);
  ~EUnion();
  virtual void accept(Visitor *v);
  virtual EUnion *clone() const;
  void swap(EUnion &);
};

class EStar : public Exp
{
public:
  Exp *exp_;

  EStar(const EStar &);
  EStar &operator=(const EStar &);
  EStar(Exp *p1);
  ~EStar();
  virtual void accept(Visitor *v);
  virtual EStar *clone() const;
  void swap(EStar &);
};

class EMore : public Exp
{
public:
  Exp *exp_;

  EMore(const EMore &);
  EMore &operator=(const EMore &);
  EMore(Exp *p1);
  ~EMore();
  virtual void accept(Visitor *v);
  virtual EMore *clone() const;
  void swap(EMore &);
};

class ERepe : public Exp
{
public:
  Exp *exp_;

  ERepe(const ERepe &);
  ERepe &operator=(const ERepe &);
  ERepe(Exp *p1);
  ~ERepe();
  virtual void accept(Visitor *v);
  virtual ERepe *clone() const;
  void swap(ERepe &);
};

class EMult : public Exp
{
public:
  Exp *exp_;
  Rang rang_;

  EMult(const EMult &);
  EMult &operator=(const EMult &);
  EMult(Exp *p1, Rang p2);
  ~EMult();
  virtual void accept(Visitor *v);
  virtual EMult *clone() const;
  void swap(EMult &);
};

class EClas : public Exp
{
public:
  ListSymb *listsymb_;

  EClas(const EClas &);
  EClas &operator=(const EClas &);
  EClas(ListSymb *p1);
  ~EClas();
  virtual void accept(Visitor *v);
  virtual EClas *clone() const;
  void swap(EClas &);
};

class EAStr : public Exp
{
public:
  ListSymb *listsymb_;

  EAStr(const EAStr &);
  EAStr &operator=(const EAStr &);
  EAStr(ListSymb *p1);
  ~EAStr();
  virtual void accept(Visitor *v);
  virtual EAStr *clone() const;
  void swap(EAStr &);
};



class ListReg : public Visitable, public std::vector<Reg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListReg *clone() const;
};

ListReg* consListReg(Reg* x, ListReg* xs);

class ListExp : public Visitable, public std::vector<Exp*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExp *clone() const;
};

ListExp* consListExp(Exp* x, ListExp* xs);

class ListSymb : public Visitable, public std::vector<Symb>
{
public:
  virtual void accept(Visitor *v);
  virtual ListSymb *clone() const;
};

ListSymb* consListSymb(Symb x, ListSymb* xs);





#endif
